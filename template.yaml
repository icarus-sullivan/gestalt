AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  gestalt
  
Globals:
  Function:
    Timeout: 30
    Runtime: nodejs12.x
    MemorySize: 1536

Resources:
  AuthConfigDynamoDB:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub
        - ${Stack}-auth
        - { Stack: !Ref "AWS::StackName" }
      KeySchema:
        - AttributeName: token 
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: token
          AttributeType: S
      BillingMode: PAY_PER_REQUEST

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      EndpointConfiguration: EDGE
      Name: !Ref "AWS::StackName"
      Cors: "'*'"
      Domain:
        EndpointConfiguration: EDGE
        DomainName: !Sub '${Domain}'
        CertificateArn: !Sub '${CertificateArn}'
        Route53:
          HostedZoneId: !Sub '${ZoneId}'
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt Authorizer.Arn

  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref "AWS::StackName"

  GetConfigFunction:
    Type: AWS::Serverless::Function
    DependsOn: "ConfigBucket"
    Properties:
      FunctionName: !Ref "AWS::StackName"
      CodeUri: handlers/get-config/
      Handler: src/index.default
      Events:
        GetConfig:
          Type: Api 
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref ApiGatewayApi
            RequestParameters:
              - method.request.querystring.version:
                  Required: false
                  Caching: false
              - method.request.querystring.key:
                  Required: false
                  Caching: false
              - method.request.header.Authorization:
                  Required: true
                  Caching: true
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref "AWS::StackName"
      Environment:
        Variables:
          CONFIG_BUCKET: !Ref "AWS::StackName"

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref AuthConfigDynamoDB
      CodeUri: handlers/authorizer/
      Handler: src/index.default
      Environment:
        Variables:
          TOKEN_TABLE: !Ref AuthConfigDynamoDB
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthConfigDynamoDB

Parameters:
  ZoneId:
    Type: String
    Description: The Zone Id to generate the sub domain within

  Domain:
    Type: String
    Description: The domain of our api

  CertificateArn:
    Type: String
    Description: The certifcate arn for use in creating the api 

  Stage:
    Type: String
    Default: dev
    Description: The env where the application is running in, e.g., dev, prod.
    AllowedValues:
      - prod
      - dev
